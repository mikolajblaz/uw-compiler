Autor: Mikołaj Błaż
Nr indeksu: 346862


# Kompilator Instant
Kompilator został zbudowany przy użyciu narzędzi BNFC, Alex oraz Happy.

Pliki src/Core.hs oraz src/State.hs są wspólne dla obu kompilatorów i zawierają
podstawowe używane typy oraz operacje na stanie.

W folderach src/Jvm oraz src/Llvm są pliki charakterystyczne dla poszczególnych
kompilatorów.

Katalog lib zawiera plik jasmin.jar oraz pliki Runtime.j, Runtime.ll z których
(po uruchomieniu make) powstaną pliki potrzebne podczas wykonywania programów
w języku Instant.


# Uruchamianie
W katalogu tests/ znajduje się jeden przykładowy plik w języku Instant.
Uruchamianie kompilatorów insc_jvm oraz insc_llvm na tym pliku jest
zobrazowane w pliku Makefile (polecenie 'make run').


# Generowanie instrukcji wyrażeń
W dwóch kompilatorów stosuje się nieco inne podejście:
JVM:
Funkcja 'genExp' zwraca wygenerowane instrukcje oraz wymaganą głebokość stosu
do wykonania tego wyrażenia. Dzięki temu można podczas generowania instrukcji
zamieniać kolejność obliczania podwyrażeń w zależności od głębokości stosu.
LLVM:
Funkcja 'genExp' zwraca jedynie rejestr, w którym zostanie umieszczone
obliczone wyrażenie, natomiast wygenerowane instrukcje są akumulowane w
stanie. Upraszcza to logikę generowania i korzysta z faktu, że po
wygenerowaniu instrukcji nie jest zmieniana ich kolejność.



# Dospecyfikowanie języka Latte
* Instrukcja _SExp_ może być jedynie wywołaniem funkcji
* Porównanie '==' i '!=' może odbywać się między dowolnymi typami (niefunkcyjnymi)
* Porównania '<', '>', '<=', '>=' mogą odbywać się tylko między typami _int_ i _boolean_
* Po instrukcji return mogą występować kolejne instrukcje (nie jest to błąd),
  jednak takie instrukcje są wykrywane i usuwane na etapie frontendu.
* Funkcja _readString_ wczytuje całą linię, ale maksymalnie, 4096 znaków.
  W przypadku próby wczytania dłuższych linii, zachowanie jest niezdefiniowane.
* Funkcja _readInt_ wczytuje liczbę oraz białe znaki po tej liczbie (m.in. znak '\n')
